"""empty message

Revision ID: 32e46bca4ca2
Revises: 5026b4edb4a3
Create Date: 2022-08-08 16:16:38.164174

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "32e46bca4ca2"
down_revision = "5026b4edb4a3"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("users")
    op.drop_index(
        "model_has_permissions_model_id_model_type_index",
        table_name="model_has_permissions",
    )
    op.drop_table("model_has_permissions")
    op.drop_index("media_model_type_model_id_index", table_name="media")
    op.drop_index("media_order_column_index", table_name="media")
    op.drop_table("media")
    op.drop_table("admins")
    op.drop_table("role_has_permissions")
    op.drop_table("permissions")
    op.drop_index("settings_group_index", table_name="settings")
    op.drop_table("settings")
    op.drop_index("password_resets_email_index", table_name="password_resets")
    op.drop_table("password_resets")
    op.drop_index(
        "model_has_roles_model_id_model_type_index", table_name="model_has_roles"
    )
    op.drop_table("model_has_roles")
    op.drop_table("migrations")
    op.drop_index(
        "personal_access_tokens_tokenable_type_tokenable_id_index",
        table_name="personal_access_tokens",
    )
    op.drop_table("personal_access_tokens")
    op.drop_table("failed_jobs")
    op.drop_table("roles")
    op.add_column("solution", sa.Column("new_id", sa.Integer(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("solution", "new_id")
    op.create_table(
        "role_has_permissions",
        sa.Column("permission_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("role_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name="role_has_permissions_permission_id_foreign",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
            name="role_has_permissions_role_id_foreign",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "permission_id", "role_id", name="role_has_permissions_pkey"
        ),
    )
    op.create_table(
        "roles",
        sa.Column(
            "id",
            sa.BIGINT(),
            server_default=sa.text("nextval('roles_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "guard_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="roles_pkey"),
        sa.UniqueConstraint("name", "guard_name", name="roles_name_guard_name_unique"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "failed_jobs",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("connection", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("queue", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("payload", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("exception", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "failed_at",
            postgresql.TIMESTAMP(precision=0),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="failed_jobs_pkey"),
        sa.UniqueConstraint("uuid", name="failed_jobs_uuid_unique"),
    )
    op.create_table(
        "personal_access_tokens",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "tokenable_type",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("tokenable_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.Column("abilities", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "last_used_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="personal_access_tokens_pkey"),
        sa.UniqueConstraint("token", name="personal_access_tokens_token_unique"),
    )
    op.create_index(
        "personal_access_tokens_tokenable_type_tokenable_id_index",
        "personal_access_tokens",
        ["tokenable_type", "tokenable_id"],
        unique=False,
    )
    op.create_table(
        "migrations",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "migration", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("batch", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="migrations_pkey"),
    )
    op.create_table(
        "model_has_roles",
        sa.Column("role_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "model_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("model_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
            name="model_has_roles_role_id_foreign",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "role_id", "model_id", "model_type", name="model_has_roles_pkey"
        ),
    )
    op.create_index(
        "model_has_roles_model_id_model_type_index",
        "model_has_roles",
        ["model_id", "model_type"],
        unique=False,
    )
    op.create_table(
        "password_resets",
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("token", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_index(
        "password_resets_email_index", "password_resets", ["email"], unique=False
    )
    op.create_table(
        "settings",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("group", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("locked", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "payload",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="settings_pkey"),
    )
    op.create_index("settings_group_index", "settings", ["group"], unique=False)
    op.create_table(
        "permissions",
        sa.Column(
            "id",
            sa.BIGINT(),
            server_default=sa.text("nextval('permissions_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "guard_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="permissions_pkey"),
        sa.UniqueConstraint(
            "name", "guard_name", name="permissions_name_guard_name_unique"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "admins",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "password", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "remember_token", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="admins_pkey"),
        sa.UniqueConstraint("email", name="admins_email_unique"),
    )
    op.create_table(
        "media",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column(
            "model_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("model_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("uuid", postgresql.UUID(), autoincrement=False, nullable=True),
        sa.Column(
            "collection_name",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "file_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "mime_type", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column("disk", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "conversions_disk",
            sa.VARCHAR(length=255),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("size", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "manipulations",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "custom_properties",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "generated_conversions",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "responsive_images",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("order_column", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="media_pkey"),
        sa.UniqueConstraint("uuid", name="media_uuid_unique"),
    )
    op.create_index("media_order_column_index", "media", ["order_column"], unique=False)
    op.create_index(
        "media_model_type_model_id_index",
        "media",
        ["model_type", "model_id"],
        unique=False,
    )
    op.create_table(
        "model_has_permissions",
        sa.Column("permission_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "model_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("model_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
            name="model_has_permissions_permission_id_foreign",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "permission_id", "model_id", "model_type", name="model_has_permissions_pkey"
        ),
    )
    op.create_index(
        "model_has_permissions_model_id_model_type_index",
        "model_has_permissions",
        ["model_id", "model_type"],
        unique=False,
    )
    op.create_table(
        "users",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "email_verified_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "password", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "remember_token", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(precision=0),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("email", name="users_email_unique"),
    )
    # ### end Alembic commands ###
